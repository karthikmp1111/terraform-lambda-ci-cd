// pipeline {
//     agent any

//     environment {
//         AWS_REGION = 'us-west-1'
//     }

//     parameters {
//         choice(name: 'APPLY_OR_DESTROY', choices: ['apply', 'destroy'], description: 'Choose whether to apply or destroy Terraform resources')
//     }

//     stages {
//         stage('Checkout Code') {
//             steps {
//                 git branch: 'main', url: 'https://github.com/karthikmp1111/terraform-lambda-ci-cd.git'
//             }
//         }

//         stage('Check for Lambda Code Changes') {
//             when {
//                 expression { params.APPLY_OR_DESTROY == 'apply' }
//             }
//             steps {
//                 script {
//                     def changes = sh(script: "cmp -s lambda/lambda_function.py lambda/.lambda_function_old.py || echo changed", returnStdout: true).trim()
//                     if (changes == 'changed') {
//                         echo "ðŸš€ Code changed, updating ZIP and deploying..."
//                         sh 'cp lambda/lambda_function.py lambda/.lambda_function_old.py'
//                         env.DEPLOY_LAMBDA = 'true'
//                     } else {
//                         echo "âœ… No changes detected, skipping Lambda deployment."
//                         env.DEPLOY_LAMBDA = 'false'
//                     }
//                 }
//             }
//         }

//         stage('Create Lambda ZIP') {
//             when {
//                 allOf {
//                     environment name: 'DEPLOY_LAMBDA', value: 'true'
//                     expression { params.APPLY_OR_DESTROY == 'apply' }
//                 }
//             }
//             steps {
//                 dir('lambda') {
//                     sh 'zip -q lambda_function.zip lambda_function.py'
//                 }
//             }
//         }

//         stage('Setup AWS Credentials') {
//             steps {
//                 withCredentials([
//                     string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY'),
//                     string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_KEY')
//                 ]) {
//                     sh '''
//                     aws configure set aws_access_key_id $AWS_ACCESS_KEY
//                     aws configure set aws_secret_access_key $AWS_SECRET_KEY
//                     aws configure set region $AWS_REGION
//                     '''
//                 }
//             }
//         }

//         stage('Terraform Init') {
//             steps {
//                 dir('terraform') {
//                     sh 'terraform init'
//                 }
//             }
//         }

//         stage('Terraform Plan') {
//             steps {
//                 dir('terraform') {
//                     sh 'terraform plan'
//                 }
//             }
//         }

//         stage('Terraform Apply') {
//             when {
//                 allOf {
//                     expression { params.APPLY_OR_DESTROY == 'apply' }
//                 }
//             }
//             steps {
//                 dir('terraform') {
//                     sh 'terraform apply -auto-approve'
//                 }
//             }
//         }

//         stage('Empty S3 Bucket Before Destroy') {
//             when {
//                 expression { params.APPLY_OR_DESTROY == 'destroy' }
//             }
//             steps {
//                 script {
//                     sh 'aws s3 rm s3://bg-cloudtrail-logs-bucket-2025 --recursive || true'
//                 }
//             }
//         }

//         stage('Terraform Destroy') {
//             when {
//                 expression { params.APPLY_OR_DESTROY == 'destroy' }
//             }
//             steps {
//                 dir('terraform') {
//                     sh 'terraform destroy -auto-approve'
//                 }
//             }
//         }
//     }
// }

pipeline {
    agent any

    environment {
        AWS_REGION = 'us-west-1'
    }

    parameters {
        choice(name: 'APPLY_OR_DESTROY', choices: ['apply', 'destroy'], description: 'Choose whether to apply or destroy Terraform resources')
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/karthikmp1111/terraform-lambda-ci-cd.git'
            }
        }

        stage('Check for Lambda Code Changes') {
            when {
                expression { params.APPLY_OR_DESTROY == 'apply' }
            }
            steps {
                script {
                    def newHash = sh(script: "md5sum lambda/lambda_function.py | awk '{print \$1}'", returnStdout: true).trim()
                    def oldHash = sh(script: "[ -f lambda/.last_deployed_hash ] && cat lambda/.last_deployed_hash || echo ''", returnStdout: true).trim()
                    
                    if (newHash != oldHash) {
                        echo "ðŸš€ Code changed, updating ZIP and deploying..."
                        sh "echo $newHash > lambda/.last_deployed_hash"
                        env.DEPLOY_LAMBDA = 'true'
                    } else {
                        echo "âœ… No changes detected, skipping Lambda deployment."
                        env.DEPLOY_LAMBDA = 'false'
                    }
                }
            }
        }

        stage('Create Lambda ZIP') {
            when {
                allOf {
                    environment name: 'DEPLOY_LAMBDA', value: 'true'
                    expression { params.APPLY_OR_DESTROY == 'apply' }
                }
            }
            steps {
                dir('lambda') {
                    sh 'zip -q lambda_function.zip lambda_function.py'
                }
            }
        }

        stage('Setup AWS Credentials') {
            steps {
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_KEY')
                ]) {
                    sh '''
                    aws configure set aws_access_key_id $AWS_ACCESS_KEY
                    aws configure set aws_secret_access_key $AWS_SECRET_KEY
                    aws configure set region $AWS_REGION
                    '''
                }
            }
        }

        stage('Terraform Init') {
            steps {
                dir('terraform') {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir('terraform') {
                    sh 'terraform plan'
                }
            }
        }

        stage('Terraform Apply') {
            when {
                allOf {
                    environment name: 'DEPLOY_LAMBDA', value: 'true'
                    expression { params.APPLY_OR_DESTROY == 'apply' }
                }
            }
            steps {
                dir('terraform') {
                    sh 'terraform apply -auto-approve'
                }
            }
        }

        stage('Empty S3 Bucket Before Destroy') {
            when {
                expression { params.APPLY_OR_DESTROY == 'destroy' }
            }
            steps {
                script {
                    sh 'aws s3 rm s3://bg-cloudtrail-logs-bucket-2025 --recursive || true'
                }
            }
        }

        stage('Terraform Destroy') {
            when {
                expression { params.APPLY_OR_DESTROY == 'destroy' }
            }
            steps {
                dir('terraform') {
                    sh 'terraform destroy -auto-approve'
                }
            }
        }
    }
}
